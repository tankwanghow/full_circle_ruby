/home/tankwanghow/.asdf/installs/ruby/2.2.10/bin/ruby -r ./siteconf20200514-28283-184a4wf.rb extconf.rb
checking for SIZEOF_OFF_T in ruby.h... yes
checking for SIZEOF_SIZE_T in ruby.h... yes
checking for SIZEOF_LONG in ruby.h... yes
checking for rb_str_set_len() in ruby.h... yes
checking for rb_hash_clear() in ruby.h... yes
checking for gmtime_r() in time.h... yes
checking if String#-@ (str_uminus) dedupes... no, String#-@ not available
checking if Hash#[]= (rb_hash_aset) dedupes... no, needs Ruby 2.6+
creating Makefile

make "DESTDIR=" clean

make "DESTDIR="
compiling httpdate.c
compiling unicorn_http.c
unicorn_http.c: In function ‘http_parser_execute’:
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.rl:339:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   }
     ^
unicorn_http.rl:341:1: note: here
   action request_uri {
 ^ ~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.rl:358:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_fragment, STR_NEW(mark, fpc));
     ^
unicorn_http.rl:360:1: note: here
   action start_query {MARK(start.query, fpc); }
 ^ ~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:618:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:620:1: note: here
 case 7:
 ^~~~
unicorn_http.c:625:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:627:1: note: here
 case 8:
 ^~~~
unicorn_http.c:632:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:634:1: note: here
 case 9:
 ^~~~
unicorn_http.c:639:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:641:1: note: here
 case 10:
 ^~~~
unicorn_http.c:646:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:648:1: note: here
 case 11:
 ^~~~
unicorn_http.c:655:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:657:1: note: here
 case 12:
 ^~~~
unicorn_http.c:662:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:664:1: note: here
 case 13:
 ^~~~
unicorn_http.rl:337:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action scheme {
     ^
unicorn_http.rl:339:1: note: here
   }
 ^ ~ 
unicorn_http.rl:336:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
     ^
unicorn_http.rl:338:1: note: here
     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
 ^   
unicorn_http.rl:336:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
     ^
unicorn_http.rl:338:1: note: here
     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
 ^   
unicorn_http.rl:337:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action scheme {
     ^
unicorn_http.rl:339:1: note: here
   }
 ^ ~ 
unicorn_http.rl:358:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_fragment, STR_NEW(mark, fpc));
     ^
unicorn_http.rl:360:1: note: here
   action start_query {MARK(start.query, fpc); }
 ^ ~~
unicorn_http.rl:333:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action start_value { MARK(mark, fpc); }
     ^
unicorn_http.rl:335:1: note: here
   action write_cont_value { write_cont_value(hp, buffer, fpc); }
 ^ ~~
unicorn_http.rl:335:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_cont_value { write_cont_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:337:1: note: here
   action scheme {
 ^ ~~
unicorn_http.rl:336:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
     ^
unicorn_http.rl:338:1: note: here
     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
 ^   
unicorn_http.rl:358:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_fragment, STR_NEW(mark, fpc));
     ^
unicorn_http.rl:360:1: note: here
   action start_query {MARK(start.query, fpc); }
 ^ ~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:1398:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1400:1: note: here
 case 25:
 ^~~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:1436:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1438:1: note: here
 case 27:
 ^~~~
unicorn_http.c:1449:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1451:1: note: here
 case 28:
 ^~~~
unicorn_http.rl:378:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     if (hp->len.chunk < 0)
     ^
unicorn_http.rl:380:1: note: here
   }
 ^ ~ 
unicorn_http.rl:363:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_query_string, STR_NEW(start.query, fpc));
     ^
unicorn_http.rl:365:1: note: here
   action http_version { http_version(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:363:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_query_string, STR_NEW(start.query, fpc));
     ^
unicorn_http.rl:365:1: note: here
   action http_version { http_version(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.c:1525:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1527:1: note: here
 case 32:
 ^~~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:336:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:336:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:336:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:336:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:342:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     VALUE str;
     ^
unicorn_http.rl:344:1: note: here
     VALIDATE_MAX_URI_LENGTH(LEN(mark, fpc), REQUEST_URI);
 ^   
unicorn_http.c:1611:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1613:1: note: here
 case 38:
 ^~~~
unicorn_http.c:1618:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1620:1: note: here
 case 39:
 ^~~~
unicorn_http.c:1648:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1650:1: note: here
 case 40:
 ^~~~
unicorn_http.c:1668:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1670:1: note: here
 case 41:
 ^~~~
unicorn_http.c:1681:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1683:1: note: here
 case 42:
 ^~~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:1730:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1732:1: note: here
 case 44:
 ^~~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:1787:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1789:1: note: here
 case 46:
 ^~~~
unicorn_http.c:1817:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1819:1: note: here
 case 47:
 ^~~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:336:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.c:1850:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1852:1: note: here
 case 49:
 ^~~~
unicorn_http.c:1878:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1880:1: note: here
 case 50:
 ^~~~
unicorn_http.c:1906:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1908:1: note: here
 case 51:
 ^~~~
unicorn_http.c:1934:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1936:1: note: here
 case 52:
 ^~~~
unicorn_http.c:1962:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1964:1: note: here
 case 53:
 ^~~~
unicorn_http.c:1990:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:1992:1: note: here
 case 54:
 ^~~~
unicorn_http.c:2018:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2020:1: note: here
 case 55:
 ^~~~
unicorn_http.c:2046:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2048:1: note: here
 case 56:
 ^~~~
unicorn_http.c:2074:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2076:1: note: here
 case 57:
 ^~~~
unicorn_http.c:2102:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2104:1: note: here
 case 58:
 ^~~~
unicorn_http.c:2130:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2132:1: note: here
 case 59:
 ^~~~
unicorn_http.c:2158:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2160:1: note: here
 case 60:
 ^~~~
unicorn_http.c:2186:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2188:1: note: here
 case 61:
 ^~~~
unicorn_http.c:2214:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2216:1: note: here
 case 62:
 ^~~~
unicorn_http.c:2242:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2244:1: note: here
 case 63:
 ^~~~
unicorn_http.c:2270:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2272:1: note: here
 case 64:
 ^~~~
unicorn_http.c:2298:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2300:1: note: here
 case 65:
 ^~~~
unicorn_http.c:2326:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2328:1: note: here
 case 66:
 ^~~~
unicorn_http.c:2354:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2356:1: note: here
 case 67:
 ^~~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:2395:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2397:1: note: here
 case 69:
 ^~~~
unicorn_http.c:2424:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2426:1: note: here
 case 70:
 ^~~~
unicorn_http.rl:339:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   }
     ^
unicorn_http.rl:341:1: note: here
   action request_uri {
 ^ ~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.rl:358:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_fragment, STR_NEW(mark, fpc));
     ^
unicorn_http.rl:360:1: note: here
   action start_query {MARK(start.query, fpc); }
 ^ ~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:2633:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2635:1: note: here
 case 76:
 ^~~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:2673:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2675:1: note: here
 case 78:
 ^~~~
unicorn_http.c:2686:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2688:1: note: here
 case 79:
 ^~~~
unicorn_http.rl:378:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     if (hp->len.chunk < 0)
     ^
unicorn_http.rl:380:1: note: here
   }
 ^ ~ 
unicorn_http.rl:363:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_query_string, STR_NEW(start.query, fpc));
     ^
unicorn_http.rl:365:1: note: here
   action http_version { http_version(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:363:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     rb_hash_aset(hp->env, g_query_string, STR_NEW(start.query, fpc));
     ^
unicorn_http.rl:365:1: note: here
   action http_version { http_version(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.c:2766:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2768:1: note: here
 case 83:
 ^~~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:336:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:336:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:336:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:336:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.rl:342:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
     VALUE str;
     ^
unicorn_http.rl:344:1: note: here
     VALIDATE_MAX_URI_LENGTH(LEN(mark, fpc), REQUEST_URI);
 ^   
unicorn_http.c:2852:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2854:1: note: here
 case 89:
 ^~~~
unicorn_http.c:2859:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2861:1: note: here
 case 90:
 ^~~~
unicorn_http.c:2889:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2891:1: note: here
 case 91:
 ^~~~
unicorn_http.c:2909:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2911:1: note: here
 case 92:
 ^~~~
unicorn_http.c:2922:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2924:1: note: here
 case 93:
 ^~~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:2971:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:2973:1: note: here
 case 95:
 ^~~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
     ^
unicorn_http.rl:332:1: note: here
   action write_field { hp->s.field_len = LEN(start.field, fpc); }
 ^ ~~
unicorn_http.c:3028:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3030:1: note: here
 case 97:
 ^~~~
unicorn_http.c:3058:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3060:1: note: here
 case 98:
 ^~~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_value { write_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:336:1: note: here
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
 ^ ~~
unicorn_http.c:3091:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3093:1: note: here
 case 100:
 ^~~~
unicorn_http.rl:383:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 
     ^
unicorn_http.rl:385:1: note: here
     if (HP_FL_TEST(hp, HASBODY)) {
 ^   
unicorn_http.c:3150:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3152:1: note: here
 case 102:
 ^~~~
unicorn_http.rl:383:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 
     ^
unicorn_http.rl:385:1: note: here
     if (HP_FL_TEST(hp, HASBODY)) {
 ^   
unicorn_http.rl:431:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 }%%
     ^
unicorn_http.rl:433:1: note: here
 /** Data **/
 ^~~~
unicorn_http.c:3218:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3220:1: note: here
 case 106:
 ^~~~
unicorn_http.c:3225:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3227:1: note: here
 case 107:
 ^~~~
unicorn_http.c:3232:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3234:1: note: here
 case 108:
 ^~~~
unicorn_http.c:3264:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3266:1: note: here
 case 109:
 ^~~~
unicorn_http.c:3295:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3297:1: note: here
 case 110:
 ^~~~
unicorn_http.c:3325:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3327:1: note: here
 case 111:
 ^~~~
unicorn_http.c:3357:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3359:1: note: here
 case 112:
 ^~~~
unicorn_http.c:3388:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3390:1: note: here
 case 113:
 ^~~~
unicorn_http.rl:337:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action scheme {
     ^
unicorn_http.rl:339:1: note: here
   }
 ^ ~ 
unicorn_http.rl:336:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
     ^
unicorn_http.rl:338:1: note: here
     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
 ^   
unicorn_http.rl:336:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
     ^
unicorn_http.rl:338:1: note: here
     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
 ^   
unicorn_http.rl:337:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action scheme {
     ^
unicorn_http.rl:339:1: note: here
   }
 ^ ~ 
unicorn_http.c:3550:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if ( ++p == pe )
     ^
unicorn_http.c:3552:1: note: here
 case 118:
 ^~~~
unicorn_http.rl:333:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action start_value { MARK(mark, fpc); }
     ^
unicorn_http.rl:335:1: note: here
   action write_cont_value { write_cont_value(hp, buffer, fpc); }
 ^ ~~
unicorn_http.rl:335:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action write_cont_value { write_cont_value(hp, buffer, fpc); }
     ^
unicorn_http.rl:337:1: note: here
   action scheme {
 ^ ~~
unicorn_http.rl:336:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
     ^
unicorn_http.rl:338:1: note: here
     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
 ^   
At top level:
unicorn_http.c:340:18: warning: ‘http_parser_en_main’ defined but not used [-Wunused-const-variable=]
 static const int http_parser_en_main = 1;
                  ^~~~~~~~~~~~~~~~~~~
unicorn_http.c:338:18: warning: ‘http_parser_en_ChunkedBody_chunk_chunk_end’ defined but not used [-Wunused-const-variable=]
 static const int http_parser_en_ChunkedBody_chunk_chunk_end = 105;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
linking shared-object unicorn_http.so

make "DESTDIR=" install
/usr/bin/install -c -m 0755 unicorn_http.so ./.gem.20200514-28283-18rayyi
