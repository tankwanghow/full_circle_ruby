===========================
=Installing Ruby and Rails=
===========================
Step 1, Install git.
====================
Git hub has instructions for doing it here .  Please note that the Debian User id should have sudo privileges. Webmin provides an easy way to do User Account Management. You could add sudo as secondary group to the account, so you would be able to perform all commands through sudo
https://gist.github.com/georgeredinger/2980504

Install common libraries
========================
sudo apt-get install build-essential libreadline-dev libssl-dev zlib1g-dev libxml2-dev libxslt-dev

Install all the things
======================
sudo apt-get install vim git-core gitg tmux

Generate SSH keys
=================
ssh-keygen -t rsa -C "test@youremail.com"

Add public key to github then test it out with this
===================================================
ssh -T git@github.com

Set global git identity
=======================
git config --global user.name "John Doe"
git config --global user.email your_email@youremail.com

Set default text editor for git
===============================
git config --global core.editor vim

Set git status colors
=====================
git config --global color.diff auto
git config --global color.status auto
git config --global color.branch auto
git config --global color.status.changed yellow
git config --global color.status.added green
git config --global color.status.untracked red

Verify git settings
===================
git config --list

Step2 
=====
Install rbenv. rbenv is a simple versionning manager for Rails.
===============================================================

install rbenv
=============
git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(rbenv init -)"' >> ~/.bashrc
exec $SHELL

Install ruby-build
==================
mkdir ~/.rbenv/plugins
git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
exec $SHELL

Step 3 - Install Ruby
=====================
rbenv install 2.0.0-p0

rbenv install 2.0.0-p0 // install rb 2

rbenv global  2.0.0-p0

gem install bundler –no-ri –no-rdoc

// Use the below to install Rails 4

gem install rails –version 4.0.0.beta1 –no-ri –no-rdoc

rbenv rehash

==============================================================
=How to install Ruby on Rails 4 with SQLite3 on Debian/Ubuntu=
==============================================================
This is the way I managed to install Ruby on Rails 4 with SQLite3 on Debian Wheezy / Ubuntu 12.04 (but it is valid also for previous versions of Ubuntu 11.04, 10.10, 10,04  etc) . I've chosen to install all the packages manually in a way that you can exactly know what you're installing and where, without using  rbenv or RVM.



Other articles you may be interested in:
ROR with MySQL for Ubuntu




     1.  INSTALL SOME LIBRARIES

    Open the console and run the following comand as super user (su -):


 apt-get install zlib1g zlib1g-dev build-essential sqlite3 libsqlite3-dev openssl libssl-dev libyaml-dev libreadline-dev libxml2-dev libxslt1-dev



     2.  DOWNLOAD AND INSTALL RUBY 1.9.3

    Download the last version Ruby 2.0.0 in the "Compiling Ruby" section of the web page
    Unzip the archive
    Install running:
        $  ./configure
        $   make
        $   sudo make install

    Check the successful installation running ruby -v: it should answer with "ruby 2.0.0pxxx..."
    And gem -v should answer "2.0.3" or next...


     3.  INSTALL RAILS

    Install Rails running on the console as super user: $  gem install rails 
    (it takes a while, don't worry)
    Check if everything's ok using the commands "rails -v" (you should get "Rails 4.0.0") or "gem list"

     4.  CREATE A NEW RAILS PROJECT

    $  rails new yourappname  
    Hold on after the message   run  bundle install 


     5.  CREATE THE BLANK DATABASE

    Put the console in myapp folder (cd yourappname) and run:  $  rake db:create

          in order to create the databases  test.sqlite3 and development.sqlite3: (you can see them in db folder).

    !!! If you receive some error jump to the session : 9. !! COMMON ISSUES THAT MIGHT OCCUR !!!


     6.  RUN YOUR RAILS APP

    Put the console in myapp folder and run $  rails server
    Open the browser
    http://localhost:3000 
    and you should see the Ruby on Rails: welcome page;-)




I suggest you to continue the ROR learning on the official documentation, in particular on the getting started page.


     9. !! COMMON ISSUES THAT MIGHT OCCUR !!

    Running rails server  you could get the following error:

/usr/local/lib/ruby/gems/2.0.0/gems/sqlite3-1.3.7/lib/sqlite3.rb:6:in `require': cannot load such file -- sqlite3/sqlite3_native (LoadError)

Solution (thanks to: http://stackoverflow.com/questions/17643897/cannot-load-such-file-sqlite3-sqlite3-native-loaderror-on-ruby-on-rails ):

        find out the location of the file sqlite3-1.3.7.gemspec (locate sqlite3-1.3.7.gemspec), mine is " /usr/local/lib/ruby/gems/2.0.0/specifications/sqlite3-1.3.7.gemspec"
        modify that line   s.require_paths = ["lib"] with   s.require_paths = ["lib/sqlite3_native"]


    Running rake db:create or rake db:migrate you could get the error: uninitialized constant Rake::DSL. The solution is to put in the first line of your Rakefile: require 'rake/dsl_definition'

    In the browser at localhost:3000 you could get the error: "no such file to load -- openssl". The solution is to go through the installation directory of ruby: ruby-1.9.2-p180/ext/openssl and run:

                  ruby extconf.rb
                  make
                  sudo make install

    Running rake db:create the first time could generate this error:


rake aborted!
Could not find a JavaScript runtime. See https://github.com/sstephenson/execjs for a list of available runtimes.

The error should be fixed adding in the Gemfile (in the root folder of your app) the lines:

gem 'execjs'
gem 'therubyracer'

    and run the comand bundle install (as super user)
    Put again the console in myapp folder and run:  $  rake db:create
